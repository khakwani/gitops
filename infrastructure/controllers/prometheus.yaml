---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    app.kubernetes.io/component: monitoring
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: prometheus-community
  namespace: monitoring
spec:
  interval: 12h
  type: oci
  url: oci://ghcr.io/prometheus-community/charts
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: loki
  namespace: monitoring
spec:
  interval: 12h
  url: https://grafana.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 1h
  chart:
    spec:
      version: "58.7.2"
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      interval: 1h
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
    alertmanager:
      enabled: true
      alertmanagerSpec:
        config:
          global:
            resolve_timeout: 5m
          route:
            group_by: ['alertname', 'job']
            group_wait: 30s
            group_interval: 5m
            repeat_interval: 1h
            receiver: 'discord-webhook'  # Use the custom receiver name
            routes:
              - match:
                  alertname: Watchdog
                receiver: 'null'
              - match_re:
                  severity: critical
                receiver: 'discord-webhook'
                continue: true
              - match:
                  severity: warning
                receiver: 'discord-webhook'
        receivers:
          - name: 'null'
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alertmanager-discord
  namespace: monitoring
spec:
  interval: 1h
  chart:
    spec:
      chart: alertmanager-discord
      version: "0.3.0"
      sourceRef:
        kind: HelmRepository
        name: alertmanagerdiscord
        namespace: monitoring
      interval: 1h
  values:
    alertmanagerDiscord:
      discordWebhook:
        url: "https://discordapp.com/api/webhooks/1253273474626224128/JZz112nDA9Lk4YZZJN5E_GToVg2u0DsNQDzSpOr3r15aIKSmermW5wo_BNErlyfwwbL2"
        channel: "prometheus"  # Specify the channel name you want alerts to appear in
        iconUrl: ""
        username: "Alertmanager"
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: loki-stack
  namespace: monitoring
spec:
  interval: 1h
  chart:
    spec:
      chart: loki-stack
      version: "2.4.1"
      sourceRef:
        kind: HelmRepository
        name: loki
        namespace: monitoring
      interval: 1h
  values:
    loki:
      enabled: true
    promtail:
      enabled: true
    rbac:
      pspEnabled: false
    serviceMonitorNamespaceSelector:
      matchNames:
        - monitoring
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    probeNamespaceSelector:
      any: true
    probeSelector: {}
    probeSelectorNilUsesHelmValues: false
    prometheus:
      additionalScrapeConfigs:
        - job_name: 'promtail'
          static_configs:
            - targets: ['promtail.monitoring.svc:3101']
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: etcd
  namespace: monitoring
  labels:
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      component: etcd
  namespaceSelector:
    matchNames:
      - kube-system
  endpoints:
    - port: https-metrics
      scheme: https
      path: /metrics
      tlsConfig:
        insecureSkipVerify: true
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 1h
  chart:
    spec:
      chart: grafana
      version: "6.15.2"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: monitoring
      interval: 1h
  values:
    adminPassword: "admin123"  # Set the admin password for Grafana
    service:
      type: ClusterIP  # Adjust service type as per your environment
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt
      hosts:
        - localhost
      tls:
        - secretName: cert-secret-mon
          hosts:
            - localhost
      path: /
    env:
      GF_SERVER_ROOT_URL: http://grafana.monitoring.svc.cluster.local
      GF_SECURITY_ADMIN_PASSWORD: "admin123"  # Set the Grafana admin password again for security
      HTTP_PROXY: ""
      http_proxy: ""
      HTTPS_PROXY: ""
      https_proxy: ""
      NO_PROXY: ""
      no_proxy: ""
